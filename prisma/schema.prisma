// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./dev.db"
// }

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?  
  access_token       String?  
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
//  talvez n 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String?
  accounts      Account[]
//  talvez retirar
  sessions      Session[]
  products      Product[]
  clients       Client[]
  orders        Order[]
  groups        Group[]

  @@map("users")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

  // userId  String
  // user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

model Group {
  id      String   @id @default(cuid())
  name    String   @unique
  userId  String
  user    User     @relation(fields: [userId], references: [id])
  clients Client[] // Relacionamento com Client
}

model Client {
  id        String  @id @default(cuid())
  name      String  @unique
  price     Float
  group     String?  @map("group_name")
  details   String?
  orders    Order[] // Relacionamento com Order
  userId    String
  user      User    @relation(fields: [userId], references: [id])
  groupId   String?
  groupRel  Group?  @relation(fields: [groupId], references: [id], onDelete: SetNull)
}

model Product {
  id        String  @id @default(cuid())
  name      String  @unique
  price     Float
  control   Boolean @default(false)
  quantity  Int     @default(0)
  details   String?
  orders    OrderProduct[]
  userId    String
  user      User    @relation(fields: [userId], references: [id])
}

model OrderProduct {
  id          String   @id @default(cuid())
  quantity    Int
  productId   String
  productName String
  product     Product  @relation(fields: [productId], references: [id])
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id])
  value       Float
}

model Order {
  id              String         @id @default(cuid())
  concluded       Boolean        @default(false)
  value           Float
  client          String
  clientRegis     Boolean        @default(false)
  clientId        String?        // Campo clientId opcional
  clientRelation  Client?        @relation(fields: [clientId], references: [id])
  description     String?
  orderItems      OrderProduct[]
  date            String
  timeStart       BigInt
  timeConcluded   BigInt?
  userId          String
  user            User           @relation(fields: [userId], references: [id])
}